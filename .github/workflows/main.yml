import requests
import os
import json
import logging
from datetime import datetime

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_engagement(defectdojo_url, defectdojo_api_key, product_id):
    url = f"{defectdojo_url}/api/v2/engagements/"
    headers = {
        'Authorization': f"Token {defectdojo_api_key}",
        'Content-Type': 'application/json'
    }
    data = {
        "product": product_id,
        "name": "CI/CD Engagement",
        "status": "In Progress",
        "target_start": "2024-01-01",
        "target_end": "2024-12-31"
    }

    response = requests.post(url, headers=headers, data=json.dumps(data))
    
    try:
        response.raise_for_status()
    except requests.exceptions.HTTPError as err:
        logger.error(f"Failed to create engagement: {err}")
        return None
    
    engagement = response.json()
    logger.info(f"Engagement created with ID: {engagement['id']}")
    return engagement['id']

def import_scan_results(defectdojo_url, defectdojo_api_key, engagement_id, file_path, scan_type):
    url = f"{defectdojo_url}/api/v2/import-scan/"
    headers = {
        'Authorization': f"Token {defectdojo_api_key}"
    }
    data = {
        "scan_type": scan_type,
        "engagement": engagement_id,
        "verified": "true",
        "active": "true",
        "scan_date": datetime.now().strftime("%Y-%m-%d")
    }

    if file_path.endswith('.json'):
        content_type = 'application/json'
    elif file_path.endswith('.xml'):
        content_type = 'application/xml'
    elif file_path.endswith('.sarif'):
        content_type = 'application/sarif+json'
    else:
        logger.error("Unsupported file format")
        return

    with open(file_path, 'rb') as file:
        files = {
            'file': (file_path, file, content_type)
        }

        response = requests.post(url, headers=headers, data=data, files=files)

    try:
        response
